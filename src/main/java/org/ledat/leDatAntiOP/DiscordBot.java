package org.ledat.leDatAntiOP;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.JDA;
import net.dv8tion.jda.api.entities.channel.middleman.MessageChannel;
import net.dv8tion.jda.api.events.interaction.command.SlashCommandInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.commands.OptionType;
import net.dv8tion.jda.api.interactions.commands.build.Commands;
import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import net.dv8tion.jda.api.requests.GatewayIntent;

import java.awt.*;
import java.util.Map;

public class DiscordBot extends ListenerAdapter {
    private JDA jda;
    private final String channelId;
    private final String commandChannelId;
    private final DatabaseManager databaseManager;
    private final IPCacheManager ipCacheManager;

    public DiscordBot(LeDatAntiOP plugin, org.bukkit.configuration.file.FileConfiguration config, DatabaseManager databaseManager, IPCacheManager ipCacheManager) {
        this.databaseManager = databaseManager;
        this.channelId = config.getString("discord.channel-id");
        this.commandChannelId = config.getString("discord.command-channel-id");
        this.ipCacheManager = ipCacheManager;
        String token = config.getString("discord.token");

        if (token == null || token.isEmpty()) {
            plugin.getLogger().severe("L·ªói: Token Discord kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh! Ki·ªÉm tra `config.yml`.");
            return;
        }

        try {
            jda = net.dv8tion.jda.api.JDABuilder.createDefault(token)
                    .enableIntents(GatewayIntent.GUILD_MESSAGES, GatewayIntent.GUILD_MEMBERS)
                    .addEventListeners(this)
                    .build()
                    .awaitReady();

            registerCommands();
            plugin.getLogger().info("Bot Discord ƒë√£ k·∫øt n·ªëi th√†nh c√¥ng!");

        } catch (InterruptedException e) {
            plugin.getLogger().severe("L·ªói: Bot b·ªã gi√°n ƒëo·∫°n khi k·∫øt n·ªëi.");
            Thread.currentThread().interrupt();
        }
    }

    private void registerCommands() {
        jda.updateCommands().addCommands(
                Commands.slash("listips", "Xem to√†n b·ªô danh s√°ch IP ƒë√£ ƒëƒÉng k√Ω"),
                Commands.slash("antiop", "Th√™m IP cho m·ªôt ng∆∞·ªùi ch∆°i")
                        .addOption(OptionType.STRING, "player", "T√™n ng∆∞·ªùi ch∆°i", true)
                        .addOption(OptionType.STRING, "ip", "ƒê·ªãa ch·ªâ IP", true),
                Commands.slash("checkip", "Ki·ªÉm tra IP c·ªßa m·ªôt ng∆∞·ªùi ch∆°i")
                        .addOption(OptionType.STRING, "player", "T√™n ng∆∞·ªùi ch∆°i", true),
                Commands.slash("resetip", "X√≥a IP c·ªßa m·ªôt ng∆∞·ªùi ch∆°i")
                        .addOption(OptionType.STRING, "player", "T√™n ng∆∞·ªùi ch∆°i", true),
                Commands.slash("unban", "Unban m·ªôt ng∆∞·ªùi ch∆°i kh·ªèi h·ªá th·ªëng AntiOP")
                        .addOption(OptionType.STRING, "player", "T√™n ng∆∞·ªùi ch∆°i", true)
        ).queue();
    }

    @Override
    public void onSlashCommandInteraction(SlashCommandInteractionEvent event) {
        MessageChannel channel = jda.getChannelById(MessageChannel.class, commandChannelId);
        if (channel == null) {
            System.out.println("Kh√¥ng t√¨m th·∫•y k√™nh Discord c√≥ ID: " + commandChannelId);
            return;
        }

        switch (event.getName()) {
            case "antiop":
                handleAntiOp(event, channel);
                break;
            case "checkip":
                handleCheckIP(event, channel);
                break;
            case "resetip":
                handleResetIP(event, channel);
                break;
            case "listips":
                handleListIPs(channel);
                break;
            case "unban":
                handleUnban(event, channel);
                break;
        }
    }

    private void handleAntiOp(SlashCommandInteractionEvent event, MessageChannel channel) {
        String playerName = event.getOption("player").getAsString();
        String ip = event.getOption("ip").getAsString();
        databaseManager.addPlayerIP(playerName, ip);
        ipCacheManager.reloadCache();

        EmbedBuilder embed = new EmbedBuilder()
                .setTitle("‚úÖ ƒê√£ th√™m IP m·ªõi")
                .setDescription("**" + playerName + "** ‚Üí `" + ip + "`")
                .setColor(Color.GREEN)
                .setFooter("LeDatAntiOP", null);
        channel.sendMessageEmbeds(embed.build()).queue();
    }

    private void handleCheckIP(SlashCommandInteractionEvent event, MessageChannel channel) {
        String playerName = event.getOption("player").getAsString();
        String ip = databaseManager.getPlayerIP(playerName);

        EmbedBuilder embed = new EmbedBuilder()
                .setFooter("LeDatAntiOP", null);

        if (ip != null) {
            embed.setTitle("üîç IP ƒë√£ ƒëƒÉng k√Ω").setDescription("**" + playerName + "** ‚Üí `" + ip + "`").setColor(Color.YELLOW);
        } else {
            embed.setTitle("Kh√¥ng t√¨m th·∫•y").setDescription("Kh√¥ng c√≥ IP n√†o ƒë∆∞·ª£c ƒëƒÉng k√Ω cho **" + playerName + "**.").setColor(Color.RED);
        }
        channel.sendMessageEmbeds(embed.build()).queue();
    }

    private void handleResetIP(SlashCommandInteractionEvent event, MessageChannel channel) {
        String playerName = event.getOption("player").getAsString();
        boolean success = databaseManager.removePlayerIP(playerName);
        ipCacheManager.reloadCache();

        EmbedBuilder embed = new EmbedBuilder()
                .setFooter("LeDatAntiOP", null);

        if (success) {
            embed.setTitle("ƒê√£ xo√° IP")
                    .setDescription("Th√¥ng tin IP c·ªßa **" + playerName + "** ƒë√£ ƒë∆∞·ª£c xo√°.")
                    .setColor(Color.GREEN);
        } else {
            embed.setTitle("Xo√° th·∫•t b·∫°i")
                    .setDescription("Kh√¥ng t√¨m th·∫•y IP ƒë√£ ƒëƒÉng k√Ω cho **" + playerName + "**.")
                    .setColor(Color.RED);
        }
        channel.sendMessageEmbeds(embed.build()).queue();
    }

    private void handleUnban(SlashCommandInteractionEvent event, MessageChannel channel) {
        String playerName = event.getOption("player").getAsString();
        boolean success = databaseManager.unbanPlayer(playerName);

        EmbedBuilder embed = new EmbedBuilder()
                .setFooter("LeDatAntiOP", null);

        if (success) {
            embed.setTitle("‚úÖ ƒê√£ unban th√†nh c√¥ng")
                    .setDescription("**" + playerName + "** ƒë√£ ƒë∆∞·ª£c unban kh·ªèi h·ªá th·ªëng AntiOP.")
                    .setColor(Color.GREEN);
        } else {
            embed.setTitle("‚ùå Unban th·∫•t b·∫°i")
                    .setDescription("Kh√¥ng t√¨m th·∫•y **" + playerName + "** trong danh s√°ch ban ho·∫∑c ƒë√£ ƒë∆∞·ª£c unban tr∆∞·ªõc ƒë√≥.")
                    .setColor(Color.RED);
        }
        
        channel.sendMessageEmbeds(embed.build()).queue();
        event.reply("ƒê√£ x·ª≠ l√Ω l·ªánh unban!").setEphemeral(true).queue();
    }

    public void sendAlert(String message) {
        MessageChannel channel = jda.getChannelById(MessageChannel.class, channelId);
        if (channel != null) {
            EmbedBuilder embed = new EmbedBuilder()
                    .setTitle("Th√¥ng b√°o h·ªá th·ªëng")
                    .setDescription(message)
                    .setColor(Color.ORANGE)
                    .setFooter("LeDatAntiOP", null);
            channel.sendMessageEmbeds(embed.build()).queue();
        }
    }

    private void handleListIPs(MessageChannel channel) {
        Map<String, String> all = databaseManager.getAllPlayerIPs();

        if (all.isEmpty()) {
            channel.sendMessageEmbeds(createEmbed("Kh√¥ng c√≥ IP n√†o trong c∆° s·ªü d·ªØ li·ªáu.", Color.RED).build()).queue();
            return;
        }

        StringBuilder content = new StringBuilder();
        for (Map.Entry<String, String> entry : all.entrySet()) {
            content.append("**").append(entry.getKey()).append("**: `").append(entry.getValue()).append("`\n");
        }

        EmbedBuilder embed = new EmbedBuilder()
                .setTitle("üìã Danh s√°ch ng∆∞·ªùi ch∆°i ƒë√£ ƒëƒÉng k√Ω IP")
                .setDescription(content.toString())
                .setColor(Color.CYAN)
                .setFooter("LeDatAntiOP", null);

        channel.sendMessageEmbeds(embed.build()).queue();
    }

    private EmbedBuilder createEmbed(String message, Color color) {
        return new EmbedBuilder()
                .setDescription(message)
                .setColor(color)
                .setFooter("LeDatAntiOP", null);
    }

    public void shutdown() {
        if (jda != null) jda.shutdown();
    }

    public JDA getJDA() {
        return jda;
    }
}
